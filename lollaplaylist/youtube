#!/usr/bin/python

import csv
import httplib2
import os
import sys

from apiclient.discovery import build
from oauth2client.client import flow_from_clientsecrets
from oauth2client.file import Storage
from oauth2client.tools import argparser, run_flow


########## START BOILERPLATE ##########

# Boilerplate copied from
# https://github.com/youtube/api-samples/blob/master/python/playlist_updates.py

# The CLIENT_SECRETS_FILE variable specifies the name of a file that contains
# the OAuth 2.0 information for this application, including its client_id and
# client_secret. You can acquire an OAuth 2.0 client ID and client secret from
# the {{ Google Cloud Console }} at
# {{ https://cloud.google.com/console }}.
# Please ensure that you have enabled the YouTube Data API for your project.
# For more information about using OAuth2 to access the YouTube Data API, see:
#   https://developers.google.com/youtube/v3/guides/authentication
# For more information about the client_secrets.json file format, see:
#   https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
CLIENT_SECRETS_FILE = "client_secrets.json"

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = """
WARNING: Please configure OAuth 2.0

To make this sample run you will need to populate the client_secrets.json file
found at:

   %s

with information from the {{ Cloud Console }}
{{ https://cloud.google.com/console }}

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
""" % os.path.abspath(os.path.join(os.path.dirname(__file__), CLIENT_SECRETS_FILE))

# This OAuth 2.0 access scope allows for full read/write access to the
# authenticated user's account.
YOUTUBE_READ_WRITE_SCOPE = "https://www.googleapis.com/auth/youtube"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

flow = flow_from_clientsecrets(
    CLIENT_SECRETS_FILE,
    message=MISSING_CLIENT_SECRETS_MESSAGE,
    scope=YOUTUBE_READ_WRITE_SCOPE
)

storage = Storage("%s-oauth2.json" % sys.argv[0])
credentials = storage.get()

if credentials is None or credentials.invalid:
    flags = argparser.parse_args()
    credentials = run_flow(flow, storage, flags)

youtube = build(
    YOUTUBE_API_SERVICE_NAME,
    YOUTUBE_API_VERSION,
    http=credentials.authorize(httplib2.Http())
)

########## END BOILERPLATE ##########


# Create playlist

response = youtube.playlists().insert(
    part='snippet,status',
    body={
        'snippet': {
            'title': 'Lollapalooza 2017',
            'description': "A playlist of each Lollapalooza 2017 artist's top YouTube video"
        },
        'status': {
            'privacyStatus': 'public'
        }
    }
).execute()

playlist_id = response['id']


# Get videos

artists_file = os.path.abspath(os.path.join(os.path.dirname(__file__), 'artists.csv'))

artists = []
with open(artists_file, 'r') as f:
    rows = csv.reader(f)
    next(rows, None)
    for row in rows:
        artists.append({'name': row[0], 'channel': row[1]})

video_ids = []
for artist in artists:
    response = youtube.search().list(
        part='id',
        q=artist['name'],
        type='video',
        channelId=artist['channel'],
    ).execute()
    video_ids.append(response['items'][0]['id']['videoId'])


# Add videos to playlist

for video_id in video_ids:
    youtube.playlistItems().insert(
        part='snippet',
        body={
            'snippet': {
                'playlistId': playlist_id,
                'resourceId': {
                    'kind': 'youtube#video',
                    'videoId': video_id
                }
            }
        }
    ).execute()
